// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cleanBorders.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cleanBorders::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cleanBorders::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> cleanBorders::ap_ST_fsm_state1 = "1";
const sc_lv<7> cleanBorders::ap_ST_fsm_state2 = "10";
const sc_lv<7> cleanBorders::ap_ST_fsm_state3 = "100";
const sc_lv<7> cleanBorders::ap_ST_fsm_state4 = "1000";
const sc_lv<7> cleanBorders::ap_ST_fsm_state5 = "10000";
const sc_lv<7> cleanBorders::ap_ST_fsm_state6 = "100000";
const sc_lv<7> cleanBorders::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> cleanBorders::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cleanBorders::ap_const_lv32_1 = "1";
const sc_lv<32> cleanBorders::ap_const_lv32_2 = "10";
const sc_lv<1> cleanBorders::ap_const_lv1_0 = "0";
const sc_lv<32> cleanBorders::ap_const_lv32_4 = "100";
const sc_lv<32> cleanBorders::ap_const_lv32_5 = "101";
const sc_lv<8> cleanBorders::ap_const_lv8_0 = "00000000";
const sc_lv<32> cleanBorders::ap_const_lv32_3 = "11";
const sc_lv<1> cleanBorders::ap_const_lv1_1 = "1";
const sc_lv<15> cleanBorders::ap_const_lv15_0 = "000000000000000";
const sc_lv<32> cleanBorders::ap_const_lv32_6 = "110";
const sc_lv<8> cleanBorders::ap_const_lv8_B4 = "10110100";
const sc_lv<8> cleanBorders::ap_const_lv8_1 = "1";
const sc_lv<11> cleanBorders::ap_const_lv11_5DC = "10111011100";
const sc_lv<15> cleanBorders::ap_const_lv15_B4 = "10110100";
const sc_lv<15> cleanBorders::ap_const_lv15_B3 = "10110011";
const bool cleanBorders::ap_const_boolean_1 = true;

cleanBorders::cleanBorders(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_196_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_196_p2 );

    SC_METHOD(thread_exitcond1_fu_173_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_reg_82 );

    SC_METHOD(thread_exitcond2_fu_147_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_1_reg_71 );

    SC_METHOD(thread_exitcond3_fu_126_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_exitcond_fu_196_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_1_reg_104 );

    SC_METHOD(thread_i_15_fu_132_p2);
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_i_16_fu_153_p2);
    sensitive << ( i_1_reg_71 );

    SC_METHOD(thread_i_1_cast3_cast_fu_143_p1);
    sensitive << ( i_1_reg_71 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_fu_138_p1 );
    sensitive << ( tmp_23_fu_168_p1 );
    sensitive << ( tmp_24_fu_191_p1 );
    sensitive << ( tmp_26_fu_220_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_input_r_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_input_r_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_173_p2 );
    sensitive << ( exitcond3_fu_126_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_j_2_fu_179_p2);
    sensitive << ( j_reg_82 );

    SC_METHOD(thread_j_3_fu_202_p2);
    sensitive << ( j_1_reg_104 );

    SC_METHOD(thread_next_mul2_fu_208_p2);
    sensitive << ( phi_mul1_reg_115 );

    SC_METHOD(thread_next_mul_fu_185_p2);
    sensitive << ( phi_mul_reg_93 );

    SC_METHOD(thread_tmp_23_fu_168_p1);
    sensitive << ( tmp_cast5_fu_165_p1 );

    SC_METHOD(thread_tmp_24_fu_191_p1);
    sensitive << ( phi_mul_reg_93 );

    SC_METHOD(thread_tmp_25_fu_214_p2);
    sensitive << ( phi_mul1_reg_115 );

    SC_METHOD(thread_tmp_26_fu_220_p1);
    sensitive << ( tmp_25_reg_271 );

    SC_METHOD(thread_tmp_cast5_fu_165_p1);
    sensitive << ( tmp_s_reg_240 );

    SC_METHOD(thread_tmp_fu_138_p1);
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_tmp_s_fu_159_p2);
    sensitive << ( i_1_cast3_cast_fu_143_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_173_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_196_p2 );
    sensitive << ( exitcond3_fu_126_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cleanBorders_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_we0, "(port)input_r_we0");
    sc_trace(mVcdFile, input_r_d0, "(port)input_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_15_fu_132_p2, "i_15_fu_132_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_16_fu_153_p2, "i_16_fu_153_p2");
    sc_trace(mVcdFile, i_16_reg_235, "i_16_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_s_fu_159_p2, "tmp_s_fu_159_p2");
    sc_trace(mVcdFile, tmp_s_reg_240, "tmp_s_reg_240");
    sc_trace(mVcdFile, exitcond2_fu_147_p2, "exitcond2_fu_147_p2");
    sc_trace(mVcdFile, j_2_fu_179_p2, "j_2_fu_179_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, next_mul_fu_185_p2, "next_mul_fu_185_p2");
    sc_trace(mVcdFile, exitcond1_fu_173_p2, "exitcond1_fu_173_p2");
    sc_trace(mVcdFile, j_3_fu_202_p2, "j_3_fu_202_p2");
    sc_trace(mVcdFile, j_3_reg_261, "j_3_reg_261");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, next_mul2_fu_208_p2, "next_mul2_fu_208_p2");
    sc_trace(mVcdFile, next_mul2_reg_266, "next_mul2_reg_266");
    sc_trace(mVcdFile, exitcond_fu_196_p2, "exitcond_fu_196_p2");
    sc_trace(mVcdFile, tmp_25_fu_214_p2, "tmp_25_fu_214_p2");
    sc_trace(mVcdFile, tmp_25_reg_271, "tmp_25_reg_271");
    sc_trace(mVcdFile, i_reg_60, "i_reg_60");
    sc_trace(mVcdFile, exitcond3_fu_126_p2, "exitcond3_fu_126_p2");
    sc_trace(mVcdFile, i_1_reg_71, "i_1_reg_71");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_reg_82, "j_reg_82");
    sc_trace(mVcdFile, phi_mul_reg_93, "phi_mul_reg_93");
    sc_trace(mVcdFile, j_1_reg_104, "j_1_reg_104");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phi_mul1_reg_115, "phi_mul1_reg_115");
    sc_trace(mVcdFile, tmp_fu_138_p1, "tmp_fu_138_p1");
    sc_trace(mVcdFile, tmp_23_fu_168_p1, "tmp_23_fu_168_p1");
    sc_trace(mVcdFile, tmp_24_fu_191_p1, "tmp_24_fu_191_p1");
    sc_trace(mVcdFile, tmp_26_fu_220_p1, "tmp_26_fu_220_p1");
    sc_trace(mVcdFile, i_1_cast3_cast_fu_143_p1, "i_1_cast3_cast_fu_143_p1");
    sc_trace(mVcdFile, tmp_cast5_fu_165_p1, "tmp_cast5_fu_165_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

cleanBorders::~cleanBorders() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void cleanBorders::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_126_p2.read(), ap_const_lv1_1))) {
        i_1_reg_71 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_1_reg_71 = i_16_reg_235.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_126_p2.read()))) {
        i_reg_60 = i_15_fu_132_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_60 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_173_p2.read(), ap_const_lv1_1))) {
        j_1_reg_104 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_1_reg_104 = j_3_reg_261.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_147_p2.read(), ap_const_lv1_1))) {
        j_reg_82 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_173_p2.read()))) {
        j_reg_82 = j_2_fu_179_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_173_p2.read(), ap_const_lv1_1))) {
        phi_mul1_reg_115 = ap_const_lv15_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul1_reg_115 = next_mul2_reg_266.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_147_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_93 = ap_const_lv15_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_173_p2.read()))) {
        phi_mul_reg_93 = next_mul_fu_185_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_16_reg_235 = i_16_fu_153_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_3_reg_261 = j_3_fu_202_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_196_p2.read()))) {
        next_mul2_reg_266 = next_mul2_fu_208_p2.read();
        tmp_25_reg_271 = tmp_25_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_147_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_240 = tmp_s_fu_159_p2.read();
    }
}

void cleanBorders::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cleanBorders::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cleanBorders::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cleanBorders::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cleanBorders::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void cleanBorders::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void cleanBorders::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void cleanBorders::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cleanBorders::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cleanBorders::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cleanBorders::thread_exitcond1_fu_173_p2() {
    exitcond1_fu_173_p2 = (!j_reg_82.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_82.read() == ap_const_lv8_B4);
}

void cleanBorders::thread_exitcond2_fu_147_p2() {
    exitcond2_fu_147_p2 = (!i_1_reg_71.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_71.read() == ap_const_lv8_B4);
}

void cleanBorders::thread_exitcond3_fu_126_p2() {
    exitcond3_fu_126_p2 = (!i_reg_60.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_60.read() == ap_const_lv8_B4);
}

void cleanBorders::thread_exitcond_fu_196_p2() {
    exitcond_fu_196_p2 = (!j_1_reg_104.read().is_01() || !ap_const_lv8_B4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_104.read() == ap_const_lv8_B4);
}

void cleanBorders::thread_i_15_fu_132_p2() {
    i_15_fu_132_p2 = (!i_reg_60.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_reg_60.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void cleanBorders::thread_i_16_fu_153_p2() {
    i_16_fu_153_p2 = (!i_1_reg_71.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_1_reg_71.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void cleanBorders::thread_i_1_cast3_cast_fu_143_p1() {
    i_1_cast3_cast_fu_143_p1 = esl_zext<11,8>(i_1_reg_71.read());
}

void cleanBorders::thread_input_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        input_r_address0 =  (sc_lv<15>) (tmp_26_fu_220_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        input_r_address0 =  (sc_lv<15>) (tmp_24_fu_191_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_address0 =  (sc_lv<15>) (tmp_23_fu_168_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_r_address0 =  (sc_lv<15>) (tmp_fu_138_p1.read());
    } else {
        input_r_address0 = "XXXXXXXXXXXXXXX";
    }
}

void cleanBorders::thread_input_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void cleanBorders::thread_input_r_d0() {
    input_r_d0 = ap_const_lv8_0;
}

void cleanBorders::thread_input_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_173_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_126_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        input_r_we0 = ap_const_logic_1;
    } else {
        input_r_we0 = ap_const_logic_0;
    }
}

void cleanBorders::thread_j_2_fu_179_p2() {
    j_2_fu_179_p2 = (!j_reg_82.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(j_reg_82.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void cleanBorders::thread_j_3_fu_202_p2() {
    j_3_fu_202_p2 = (!j_1_reg_104.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(j_1_reg_104.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void cleanBorders::thread_next_mul2_fu_208_p2() {
    next_mul2_fu_208_p2 = (!phi_mul1_reg_115.read().is_01() || !ap_const_lv15_B4.is_01())? sc_lv<15>(): (sc_biguint<15>(phi_mul1_reg_115.read()) + sc_biguint<15>(ap_const_lv15_B4));
}

void cleanBorders::thread_next_mul_fu_185_p2() {
    next_mul_fu_185_p2 = (!phi_mul_reg_93.read().is_01() || !ap_const_lv15_B4.is_01())? sc_lv<15>(): (sc_biguint<15>(phi_mul_reg_93.read()) + sc_biguint<15>(ap_const_lv15_B4));
}

void cleanBorders::thread_tmp_23_fu_168_p1() {
    tmp_23_fu_168_p1 = esl_zext<64,15>(tmp_cast5_fu_165_p1.read());
}

void cleanBorders::thread_tmp_24_fu_191_p1() {
    tmp_24_fu_191_p1 = esl_zext<64,15>(phi_mul_reg_93.read());
}

void cleanBorders::thread_tmp_25_fu_214_p2() {
    tmp_25_fu_214_p2 = (!phi_mul1_reg_115.read().is_01() || !ap_const_lv15_B3.is_01())? sc_lv<15>(): (sc_biguint<15>(phi_mul1_reg_115.read()) + sc_biguint<15>(ap_const_lv15_B3));
}

void cleanBorders::thread_tmp_26_fu_220_p1() {
    tmp_26_fu_220_p1 = esl_zext<64,15>(tmp_25_reg_271.read());
}

void cleanBorders::thread_tmp_cast5_fu_165_p1() {
    tmp_cast5_fu_165_p1 = esl_sext<15,11>(tmp_s_reg_240.read());
}

void cleanBorders::thread_tmp_fu_138_p1() {
    tmp_fu_138_p1 = esl_zext<64,8>(i_reg_60.read());
}

void cleanBorders::thread_tmp_s_fu_159_p2() {
    tmp_s_fu_159_p2 = (!i_1_cast3_cast_fu_143_p1.read().is_01() || !ap_const_lv11_5DC.is_01())? sc_lv<11>(): (sc_biguint<11>(i_1_cast3_cast_fu_143_p1.read()) + sc_bigint<11>(ap_const_lv11_5DC));
}

void cleanBorders::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_126_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_147_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_fu_173_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_196_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

