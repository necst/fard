// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dilate_HH_
#define _dilate_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dilate : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<8> > output_r_d0;
    sc_out< sc_lv<15> > output_r_address1;
    sc_out< sc_logic > output_r_ce1;
    sc_out< sc_logic > output_r_we1;
    sc_out< sc_lv<8> > output_r_d1;
    sc_out< sc_lv<15> > foreground_address0;
    sc_out< sc_logic > foreground_ce0;
    sc_in< sc_lv<8> > foreground_q0;


    // Module declarations
    dilate(sc_module_name name);
    SC_HAS_PROCESS(dilate);

    ~dilate();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<15> > indvar_flatten_reg_151;
    sc_signal< sc_lv<8> > j_reg_162;
    sc_signal< sc_lv<8> > i_reg_173;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_184_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_353;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<15> > indvar_flatten_next_fu_190_p2;
    sc_signal< sc_lv<15> > indvar_flatten_next_reg_357;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > i_mid2_fu_202_p3;
    sc_signal< sc_lv<8> > i_mid2_reg_362;
    sc_signal< sc_lv<8> > tmp_mid2_v_v_fu_216_p3;
    sc_signal< sc_lv<8> > tmp_mid2_v_v_reg_369;
    sc_signal< sc_lv<15> > tmp_mid2_fu_227_p2;
    sc_signal< sc_lv<15> > tmp_mid2_reg_375;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<15> > tmp_s_fu_236_p2;
    sc_signal< sc_lv<15> > tmp_s_reg_382;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<64> > tmp_19_fu_241_p1;
    sc_signal< sc_lv<64> > tmp_19_reg_389;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<1> > tmp_fu_248_p3;
    sc_signal< sc_lv<1> > tmp_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state6_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_lv<15> > tmp_20_fu_266_p2;
    sc_signal< sc_lv<15> > tmp_20_reg_404;
    sc_signal< sc_lv<15> > tmp_73_1_fu_271_p2;
    sc_signal< sc_lv<15> > tmp_73_1_reg_411;
    sc_signal< sc_lv<15> > tmp_72_2_fu_286_p2;
    sc_signal< sc_lv<15> > tmp_72_2_reg_416;
    sc_signal< sc_lv<8> > i_13_fu_291_p2;
    sc_signal< sc_lv<8> > i_13_reg_423;
    sc_signal< sc_lv<15> > tmp_73_1_2_fu_304_p2;
    sc_signal< sc_lv<15> > tmp_73_1_2_reg_428;
    sc_signal< sc_lv<15> > tmp_21_fu_309_p2;
    sc_signal< sc_lv<15> > tmp_21_reg_433;
    sc_signal< sc_lv<15> > tmp_73_0_2_fu_314_p2;
    sc_signal< sc_lv<15> > tmp_73_0_2_reg_438;
    sc_signal< sc_lv<15> > tmp_73_2_fu_335_p2;
    sc_signal< sc_lv<15> > tmp_73_2_reg_443;
    sc_signal< sc_lv<15> > tmp_73_2_2_fu_340_p2;
    sc_signal< sc_lv<15> > tmp_73_2_2_reg_448;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_lv<15> > ap_phi_mux_indvar_flatten_phi_fu_155_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<8> > ap_phi_mux_j_phi_fu_166_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_i_phi_fu_177_p4;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_lv<15> > output_addr_5_gep_fu_73_p3;
    sc_signal< sc_lv<64> > tmp_74_0_1_fu_296_p1;
    sc_signal< sc_lv<64> > tmp_74_1_fu_300_p1;
    sc_signal< sc_lv<64> > tmp_74_1_2_fu_319_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_74_2_1_fu_323_p1;
    sc_signal< sc_lv<64> > tmp_22_fu_327_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > tmp_74_0_2_fu_331_p1;
    sc_signal< sc_lv<64> > tmp_74_2_fu_345_p1;
    sc_signal< sc_lv<64> > tmp_74_2_2_fu_349_p1;
    sc_signal< sc_lv<1> > exitcond_fu_196_p2;
    sc_signal< sc_lv<8> > j_s_fu_210_p2;
    sc_signal< sc_lv<8> > tmp_mid2_fu_227_p0;
    sc_signal< sc_lv<15> > i_cast3_fu_233_p1;
    sc_signal< sc_lv<9> > i_cast_fu_245_p1;
    sc_signal< sc_lv<9> > tmp1_fu_256_p2;
    sc_signal< sc_lv<15> > tmp1_cast_fu_262_p1;
    sc_signal< sc_lv<9> > tmp2_fu_276_p2;
    sc_signal< sc_lv<15> > tmp2_cast_fu_282_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<15> > tmp_mid2_fu_227_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_pp0_stage4;
    static const sc_lv<7> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<15> ap_const_lv15_7BC4;
    static const sc_lv<15> ap_const_lv15_1;
    static const sc_lv<8> ap_const_lv8_B3;
    static const sc_lv<15> ap_const_lv15_B4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<9> ap_const_lv9_14C;
    static const sc_lv<15> ap_const_lv15_7FFF;
    static const sc_lv<9> ap_const_lv9_B4;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_state10_pp0_stage3_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage4_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state8_pp0_stage1_iter1();
    void thread_ap_block_state9_pp0_stage2_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_177_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_155_p4();
    void thread_ap_phi_mux_j_phi_fu_166_p4();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_184_p2();
    void thread_exitcond_fu_196_p2();
    void thread_foreground_address0();
    void thread_foreground_ce0();
    void thread_i_13_fu_291_p2();
    void thread_i_cast3_fu_233_p1();
    void thread_i_cast_fu_245_p1();
    void thread_i_mid2_fu_202_p3();
    void thread_indvar_flatten_next_fu_190_p2();
    void thread_j_s_fu_210_p2();
    void thread_output_addr_5_gep_fu_73_p3();
    void thread_output_r_address0();
    void thread_output_r_address1();
    void thread_output_r_ce0();
    void thread_output_r_ce1();
    void thread_output_r_d0();
    void thread_output_r_d1();
    void thread_output_r_we0();
    void thread_output_r_we1();
    void thread_tmp1_cast_fu_262_p1();
    void thread_tmp1_fu_256_p2();
    void thread_tmp2_cast_fu_282_p1();
    void thread_tmp2_fu_276_p2();
    void thread_tmp_19_fu_241_p1();
    void thread_tmp_20_fu_266_p2();
    void thread_tmp_21_fu_309_p2();
    void thread_tmp_22_fu_327_p1();
    void thread_tmp_72_2_fu_286_p2();
    void thread_tmp_73_0_2_fu_314_p2();
    void thread_tmp_73_1_2_fu_304_p2();
    void thread_tmp_73_1_fu_271_p2();
    void thread_tmp_73_2_2_fu_340_p2();
    void thread_tmp_73_2_fu_335_p2();
    void thread_tmp_74_0_1_fu_296_p1();
    void thread_tmp_74_0_2_fu_331_p1();
    void thread_tmp_74_1_2_fu_319_p1();
    void thread_tmp_74_1_fu_300_p1();
    void thread_tmp_74_2_1_fu_323_p1();
    void thread_tmp_74_2_2_fu_349_p1();
    void thread_tmp_74_2_fu_345_p1();
    void thread_tmp_fu_248_p3();
    void thread_tmp_mid2_fu_227_p0();
    void thread_tmp_mid2_fu_227_p00();
    void thread_tmp_mid2_fu_227_p2();
    void thread_tmp_mid2_v_v_fu_216_p3();
    void thread_tmp_s_fu_236_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
