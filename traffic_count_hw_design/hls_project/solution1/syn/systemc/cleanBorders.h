// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cleanBorders_HH_
#define _cleanBorders_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct cleanBorders : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_out< sc_logic > input_r_we0;
    sc_out< sc_lv<8> > input_r_d0;


    // Module declarations
    cleanBorders(sc_module_name name);
    SC_HAS_PROCESS(cleanBorders);

    ~cleanBorders();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > i_15_fu_132_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_16_fu_153_p2;
    sc_signal< sc_lv<8> > i_16_reg_235;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > tmp_s_fu_159_p2;
    sc_signal< sc_lv<11> > tmp_s_reg_240;
    sc_signal< sc_lv<1> > exitcond2_fu_147_p2;
    sc_signal< sc_lv<8> > j_2_fu_179_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<15> > next_mul_fu_185_p2;
    sc_signal< sc_lv<1> > exitcond1_fu_173_p2;
    sc_signal< sc_lv<8> > j_3_fu_202_p2;
    sc_signal< sc_lv<8> > j_3_reg_261;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<15> > next_mul2_fu_208_p2;
    sc_signal< sc_lv<15> > next_mul2_reg_266;
    sc_signal< sc_lv<1> > exitcond_fu_196_p2;
    sc_signal< sc_lv<15> > tmp_25_fu_214_p2;
    sc_signal< sc_lv<15> > tmp_25_reg_271;
    sc_signal< sc_lv<8> > i_reg_60;
    sc_signal< sc_lv<1> > exitcond3_fu_126_p2;
    sc_signal< sc_lv<8> > i_1_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > j_reg_82;
    sc_signal< sc_lv<15> > phi_mul_reg_93;
    sc_signal< sc_lv<8> > j_1_reg_104;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<15> > phi_mul1_reg_115;
    sc_signal< sc_lv<64> > tmp_fu_138_p1;
    sc_signal< sc_lv<64> > tmp_23_fu_168_p1;
    sc_signal< sc_lv<64> > tmp_24_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_26_fu_220_p1;
    sc_signal< sc_lv<11> > i_1_cast3_cast_fu_143_p1;
    sc_signal< sc_lv<15> > tmp_cast5_fu_165_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<11> ap_const_lv11_5DC;
    static const sc_lv<15> ap_const_lv15_B4;
    static const sc_lv<15> ap_const_lv15_B3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_173_p2();
    void thread_exitcond2_fu_147_p2();
    void thread_exitcond3_fu_126_p2();
    void thread_exitcond_fu_196_p2();
    void thread_i_15_fu_132_p2();
    void thread_i_16_fu_153_p2();
    void thread_i_1_cast3_cast_fu_143_p1();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_input_r_d0();
    void thread_input_r_we0();
    void thread_j_2_fu_179_p2();
    void thread_j_3_fu_202_p2();
    void thread_next_mul2_fu_208_p2();
    void thread_next_mul_fu_185_p2();
    void thread_tmp_23_fu_168_p1();
    void thread_tmp_24_fu_191_p1();
    void thread_tmp_25_fu_214_p2();
    void thread_tmp_26_fu_220_p1();
    void thread_tmp_cast5_fu_165_p1();
    void thread_tmp_fu_138_p1();
    void thread_tmp_s_fu_159_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
